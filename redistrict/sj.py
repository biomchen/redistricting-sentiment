"""
The version of imported module in this class as below:
json version:  2.0.9
shapefile version:  2.1.0
pyproj version:  2.3.1
geopy version:  1.20.0

If you cannot run the program, please check your module version.

"""

"""
The shapefile provided by Frederick County, MD was generated by ArcGIS. The
EPSG is 2248 for Maryland. In order to overlay the Maryland on world maps, it
requires to convert those coordinates under EPSG 4326.
U
nfortunately, the shapefiles are not unified in terms of their 'fields' names
and some of the school districts are multipolygon instead of standard polygon.
Multiple steps have been adopted to address such differences among the data.

"""

import json
from json import dumps
import shapefile
from pyproj import Proj, transform
from geopy.geocoders import Nominatim


class Shape2Json:
    def __init__(self, fname, output1, output2, school_param, school_list,
                addresses = None, coordinates = None):
        self.fname = fname
        self.output1 = output1
        self.output2 = output2
        self.school_param = school_param
        self.school_list = school_names
        self.addresses = addresses
        self.coordinates = coordinates

    def convert_json(self): # schoolPara refers to 'SCHOOL_1','SCHOOL' in different shapefiles
        reader = shapefile.Reader(self.fname)
        fields = reader.fields[1:]
        field_names = [field[0] for field in fields]
        features = []

        print("shapefile to json ...")

        for record in reader.shapeRecords():
            attributes = dict(zip(field_names, record.record))
            if attributes[self.school_param] in self.school_list:
                geo_records = record.shape.__geo_interface__
                features.append(dict(type = 'Feature',
                                geometry = geo_records,
                                properties = attributes))
            else:
                continue

        json_file = open(self.output1, 'w')
        json_file.write(dumps({'type': 'FeatureCollection',
                               'features': features},
                               indent = 2) + '\n')
        json_file.close()

        print('Done!')

    def epsg_convert(self):
        in_proj = Proj(init = 'epsg:2248')# pyproj.Proj API parameters
        out_proj = Proj(init = 'epsg:4326')

        print("coverting coordinates ...")

        with open(self.output1) as jsonFile:
            data = json.load(jsonFile)
            features_old = data['features']
            coordinates = []
            features_new = []
            self.addresses = {}

            for feature in features_old:
                records = feature['geometry']['coordinates'][0]
                type = feature['geometry']['type']

                if type == 'Polygon':
                    for coordinate in records:
                        coordinate_new = transform(in_proj,
                                                   out_proj,
                                                   coordinate[0],
                                                   coordinate[1])
                        coordinates.append([coordinate_new[0],
                                            coordinate_new[1]])
                elif type == 'MultiPolygon':
                    for record in records:
                        for coordinate in record:
                            coordinate_new = transform(in_proj,
                                                       out_proj,
                                                       coordinate[0],
                                                       coordinate[1])
                            coordinates.append([coordinate_new[0],
                                                coordinate_new[1]])
                attributes = feature['properties']
                school = attributes[self.school_param]
                address = attributes['ADDRESS']
                city = attributes['CITY']
                self.addresses.update({school: (address + ' ' + city)})
                geo_new = {'type': types, 'coordinates': [coordinates]}
                features_new.append(dict(type = 'Feature',
                                         geometry = geo_new,
                                         properties = attributes))

        json_file = open(self.output2, 'w')
        json_file.write(dumps({'type': 'FeatureCollection',
                               'features': features_new},
                               indent = 2) + '\n')
        json_file.close()

        print('Done!')

    def get_coordinates(self):
        self.coordinates = {}

        print("getting GPS coordinates of schools ...")

        for school in self.addresses.keys():
            address = self.addresses[school]
            nominatim = Nominatim(user_agent='my-application')
            coordinate = nominatim.geocode(address)
            if coordinate is None:
                self.coordinates.update({school:('NA', 'NA')})
            else:
                self.coordinates.update({school:(coordinate.latitude,
                                         coordinate.longitude)})

        print('Done!')
