"""
The version of imported module in this class as below:
json version:  2.0.9
shapefile version:  2.1.0
pyproj version:  2.3.1
geopy version:  1.20.0

If you cannot run the program, please check your module version.

"""

"""
The shapefile provided by Frederick County, MD was generated by ArcGIS. The EPSG is 2248.
In order to overlay the polygon on the web-based maps, it requires to convert those coordinates.
Unfortunately, the shapefiles are not unified in terms of their 'fields' names and some of
the school districts are multipolygon instead of standard polygon. Multiple steps have been adopted
to address such differences among the data.

"""

import json
from json import dumps
import shapefile
from pyproj import Proj, transform
from geopy.geocoders import Nominatim


class shape2json:

    def __init__(self, fname, output1, output2, schoolPara, schoolList, addresses = None, coordinates = None):
        self.fname = fname
        self.output1 = output1
        self.output2 = output2
        self.schoolPara = schoolPara
        self.schoolList = schoolList
        self.addresses = addresses
        self.coordinates = coordinates

    def trans2json(self): # schoolPara refers to 'SCHOOL_1','SCHOOL' in different shapefiles
        reader = shapefile.Reader(self.fname)
        fields = reader.fields[1:]
        fieldNames = [field[0] for field in fields]
        features = []

        print("shapefile to json ...")

        for sr in reader.shapeRecords():
            atr = dict(zip(fieldNames, sr.record))
            if atr[self.schoolPara] in self.schoolList:
                geom = sr.shape.__geo_interface__
                features.append(dict(type = 'Feature', geometry = geom, properties = atr))
            else:
                continue

        jsonfile = open(self.output1, 'w')
        jsonfile.write(dumps({'type': 'FeatureCollection', 'features': features}, indent = 2) + '\n')
        jsonfile.close()

        print('Done!')

    def coordinateConvert(self):
        # pyproj.Proj API parameters
        inProj = Proj(init = 'epsg:2248')
        outProj = Proj(init = 'epsg:4326')

        print("coverting coordinates ...")

        with open(self.output1) as jsonFile:
            data = json.load(jsonFile)
            featuresOld = data['features']

            coordinates = []
            featuresNew = []
            self.addresses = {}

            for feature in featuresOld:
                records = feature['geometry']['coordinates'][0]
                types = feature['geometry']['type']

                if types == 'Polygon':
                    for coordinate in records:
                        m2 = transform(inProj, outProj, coordinate[0], coordinate[1])
                        coordinates.append([m2[0], m2[1]])

                elif types == 'MultiPolygon':
                    for record in records:
                        for coordinate in record:
                            m2 = transform(inProj, outProj, coordinate[0], coordinate[1])
                            coordinates.append([m2[0], m2[1]])

                atr = feature['properties']
                school = atr[self.schoolPara]
                address = atr['ADDRESS']
                city = atr['CITY']
                self.addresses.update({school: (address + ' ' + city)})

                geomNew = {'type': types, 'coordinates': [coordinates]}
                featuresNew.append(dict(type = 'Feature', geometry = geomNew, properties = atr))

        jsonfile = open(self.output2, 'w')
        jsonfile.write(dumps({'type': 'FeatureCollection', 'features': featuresNew}, indent = 2) + '\n')
        jsonfile.close()

        print('Done!')

    def getCoordinates(self):
        self.coordinates = {}

        print("getting GPS coordinates of schools ...")

        for school in self.addresses.keys():
            address = self.addresses[school]
            coordinate = Nominatim(user_agent='my-application').geocode(address)
            if coordinate is None:
                self.coordinates.update({school:('NA', 'NA')})
            else:
                self.coordinates.update({school:(coordinate.latitude, coordinate.longitude)})

        print('Done!')
